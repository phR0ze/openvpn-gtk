#!/usr/bin/env ruby
#MIT License
#Copyright (c) 2018 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

#-----------------------------------------------------------------------------------------------
# Simple GTK+ UI for openvpn and tooling for simple VPN access
# https://developer.gnome.org/gtk3/stable
# https://lazka.github.io/pgi-docs/Gtk-3.0/classes.html
# https://lazka.github.io/pgi-docs/Gdk-3.0/constants.html
# https://github.com/ruby-gnome2/ruby-gnome2/tree/master/gtk3
#-----------------------------------------------------------------------------------------------
$root_path = File.dirname(File.expand_path(__FILE__))
$root_path = '/usr/share/vpnctl' if $root_path == '/usr/bin'
$LOAD_PATH.unshift($root_path)
load File.join(File.dirname(File.expand_path(__FILE__)), "vpnctl-cli")

# Packages available in cyberlinux or arch linux
begin
  require 'gtk3'
  require 'colorize'
  require 'lib/model'
  require 'lib/config'
  require 'lib/gtkassist'
rescue Exception => e
  puts(e.message)
  #mod = e.message.split(' ').last.sub('/', '-')
  #!puts("Error: install missing package with 'sudo package -S ruby-#{mod}'") and exit
end

class VpnCtl
  def initialize
    !puts("Error: must be executed as root user".colorize(:red)) and exit unless Process.uid.zero?
    @datapath = File.dirname(File.expand_path(__FILE__))
    @datapath = '/usr/share/vpnctl' if File.basename(@datapath) != 'vpnctl'
    Gas.init('vpnctl.ui', @datapath, "32x32/vpnctl.png", "48x48/vpnctl.png", nil)

    Config.init('vpnctl.yml')
    Log.init(path:"#{$root_path}/vpnctl.log", queue:true, stdout:true)

#    @enabled_icon = File.join(@icon_path, 'vpnctl-enabled.png')
#    @targeted_icon = File.join(@icon_path, 'vpnctl-targeted.png')
#    @disabled_icon  = File.join(@icon_path, 'vpnctl-disabled.png')

    # Track VPN state
    @vpn = nil
    @vpns = Config.vpns
    @ovpns = Dir[File.join(Config.ovpn_path, '*')]
      .reject{|x| ['.pem', '.crt'].any?{|y| x.end_with?(y)}}.sort

#    # VPN thread communication
#    @halt = false
#    @vpn_comm_in = nil
#
    self.construct_ui
    self.connect_signals
  end

  # Inflate UI elements from glade xml files and create any dynamic UI needed
  # including populating ui widgets with data.
  def construct_ui
    @vpnlist_box = Gas.builder.get_object("vpn-list-box")
    @vpn_name = Gas.builder.get_object("vpn-name-entry")
    @vpn_ovpn = Gas.builder.get_object("vpn-ovpn-combo")
    @vpn_ovpn_entry = Gas.builder.get_object("vpn-ovpn-entry")
    @vpn_logintype = Gas.builder.get_object("vpn-logintype-combo")
    @vpn_user = Gas.builder.get_object("vpn-username-entry")
    @vpn_pass = Gas.builder.get_object("vpn-password-entry")
    @vpn_routes = Gas.builder.get_object("vpn-routes-entry")
    @vpn_apps_sw = Gas.builder.get_object("apps-switch")
    @vpn_apps = Gas.builder.get_object("apps-text")
    @vpn_default = Gas.builder.get_object("default-switch")
    @connect_btn = Gas.builder.get_object("connect-button")
    @save_btn = Gas.builder.get_object("save-button")

#    @tray = create_system_tray_icon
#    @popup_menu = create_popup_menu
#    @logwin, @logview, @logiter = create_log_window
#    @settings = create_settings_window

    # Populate ovpn configs
    @ovpns.each{|x| @vpn_ovpn.append_text(File.basename(x))}

    # Populate the login type combo box
    @vpn_logintype.append_text(Model::PassTypeDisplay[Model::PassTypes.ask])
    @vpn_logintype.append_text(Model::PassTypeDisplay[Model::PassTypes.save])

    # Read in vpns from config file and populate list
    # then select the default or first one
    @vpns.each{|vpn|
      vpn.btn = Gtk::Button.new(label: vpn.name)
      @vpnlist_box.pack_start(vpn.btn)
      vpn.btn.show
    }
    self.select_default_or_first_vpn

    Gas.apply_styles
  end

  # Select the default or first vpn if doesn't exist
  def select_default_or_first_vpn
    if vpn = @vpns.find{|x| x.default}
      self.select_vpn(vpn.name)
    elsif @vpns.any?
      self.select_vpn(@vpns.first.name)
    else
      self.select_vpn(nil, reset:true)
    end
  end

  def activate_pass_entry
    ctx = @vpn_pass.style_context
    ctx.remove_class('entry-deactivate')
    @vpn_pass.text = @vpn.login.pass || ""
    @vpn_pass.placeholder_text = "VPN password"
    @vpn_pass.editable = true
    @vpn_pass.secondary_icon_activatable = true
  end

  def deactivate_pass_entry
    ctx = @vpn_pass.style_context
    ctx.add_class('entry-deactivate')
    @vpn_pass.text = ""
    @vpn_pass.placeholder_text = ""
    @vpn_pass.editable = false
    @vpn_pass.secondary_icon_activatable = false
  end

  # Select the given vpn from the list and populate ui
  # @param name [String] name of the vpn to select
  # @param reset [Bool] true then reset the vpn ui
  def select_vpn(name, reset:false)
    @vpn = reset ? nil : @vpns.find{|x| x.name == name}
    @vpn_name.text = reset ? "" : @vpn.name
    @vpn_ovpn.active = reset ? -1 : @ovpns.index{|x| x == @vpn.ovpn} || -1
    @vpn_ovpn_entry.text = '' if @vpn_ovpn.active == -1
    @vpn_logintype.active = reset ? 0 : @vpn.login.type == Model::PassTypes.ask ? 0 : 1
    @vpn_user.text = reset ? "" : @vpn.login.user || ""
    activate_pass_entry if !reset && @vpn.login.type == Model::PassTypes.save
    deactivate_pass_entry if reset || @vpn.login.type != Model::PassTypes.save
    @vpn_routes.text = reset ? "" : @vpn.routes * ","
    @vpn_apps_sw.active = reset ? false : @vpn.target
    @vpn_apps.buffer.text = reset ? "" : @vpn.apps * "\n"
    @vpn_default.active = reset ? true : @vpn.default
    self.select_styling(Model::State.active)
  end

  # Configure styling for a given vpn and state
  # @param state [Model::State] state to set styling for
  # @param force [Bool] true then set state regardless
  def select_styling(state, force:false)
    set_disconnect = ->(){
      _ctx = @connect_btn.style_context
      _ctx.remove_class('button-action')
      _ctx.add_class('button-disconnect')
      @connect_btn.label = "Disconnect"
    }
    set_connect = ->(){
      _ctx = @connect_btn.style_context
      _ctx.remove_class('button-disconnect')
      _ctx.add_class('button-action')
      @connect_btn.label = "Connect"
    }

    @vpns.each{|vpn|
      ctx = vpn.btn.style_context
      if state == Model::State.active
        if vpn.name == @vpn.name
          if force || vpn.state != Model::State.connected
            vpn.state = state
            ctx.add_class('button-active')
            ctx.remove_class('button-action')
            set_connect.call
          else
            set_disconnect.call
          end
        elsif vpn.state == Model::State.active
          vpn.state = nil
          ctx.remove_class('button-active')
        end
      elsif vpn.name == @vpn.name
        vpn.state = state
        ctx.add_class('button-action')
        set_disconnect.call
        ctx.remove_class('button-active')
      end
    }
  end

  # Add a new vpn button and select it
  # @param vpn [Model::Vpn] vpn to add if given
  def add_vpn(vpn:nil)

    # Ensure the vpn has a unique name
    name = vpn ? vpn.name : "New VPN"
    if vpn
      i = (0..10).find{|i| !@vpns.any?{|x| x.name == "#{name} #{i}"}}
      name = "#{name} #{i}"
    end

    # Create the vpn and select it
    vpn = Config.add_vpn(name).clone(vpn)
    vpn.btn = Gtk::Button.new(label:name)
    @vpnlist_box.pack_start(vpn.btn)
    vpn.btn.signal_connect('clicked'){|x| self.select_vpn(x.label)}
    vpn.btn.show
    @vpns << vpn
    Gas.apply_styles(vpn.btn)
    self.select_vpn(vpn.name)
  end

  # Remove the currently selected vpn
  def del_vpn
    return unless @vpn
    @vpns.delete(@vpn)
    @vpnlist_box.remove(@vpn.btn)
    Config.del_vpn(@vpn.name)
    @vpn = nil
    self.select_default_or_first_vpn
    Config.save
  end

  # Save the active vpn
  def save_vpn
    type = @vpn_logintype.active == 0 ? Model::PassTypes.ask : Model::PassTypes.save
    vpn = Model::Vpn.new(@vpn_name.text, Model::Login.new(type, @vpn_user.text, @vpn_pass.text),
      @vpn_routes.text.split(','), File.join(Config.ovpn_path, @vpn_ovpn.active_text),
      '', @vpn_apps_sw.active?, @vpn_apps.buffer.text.split("\n"), @vpn_default.active?)

    # Add the vpn as a new entry and select
    self.add_vpn(vpn:vpn) unless @vpn

    # Update and save the vpn
    Config.update_vpn(@vpn.clone(vpn))

    # Update the button label after as its used as itentifier first
    @vpn.btn.label = @vpn.name
    Config.save
  end

  # Connect/disconnect to the selected vpn
  def connect_or_disconnect
    self.save_vpn

    # Connect the current connected vpn
    if @vpn.state == Model::State.active
      pass = @vpn.login.pass if @vpn.login.type == Model::PassTypes.save
      if @vpn.login.type == Model::PassTypes.ask
        pass = Gas::Prompt.new("Enter Password").run
      end
      self.connect(pass)
      self.select_styling(Model::State.connected)

    # Disconnect the current connected vpn
    else
      puts("VPN: #{@vpn.name} - disconnecting")
      self.select_styling(Model::State.active, force:true)
    end
  end

  # Connect to the active vpn
  # @param pass [String] to use when connecting
  def connect(pass)
    @vpn_thread = Thread.new{
      begin
        vpn = VpnCtlCli.new(@vpn.name)
        vpn.config.login.pass = pass
        vpn_thread = vpn.start
        Log.info("MGMT: Waiting for VPN to halt".colorize(:magenta))
        vpn_thread.join
      rescue Interrupt
        Log.puts(stamp:false)
        Log.info("MGMT: Halting VPN".colorize(:magenta))
        vpn_thread.push(Model::CommCmd.halt)
        vpn_thread.pop
        Log.info("MGMT: VPN Halted".colorize(:magenta))
      end
    }
  end

  # Configure signals
  def connect_signals

    # Connect button
    @connect_btn.signal_connect('clicked'){|x| self.connect_or_disconnect}
    @save_btn.signal_connect('clicked'){|x| self.save_vpn}

    # Add/del vpn button
    Gas.builder.get_object("add-button").signal_connect('clicked'){|btn| self.add_vpn}
    Gas.builder.get_object("delete-button").signal_connect('clicked'){|btn| self.del_vpn}

    # Show password
    @vpn_pass.signal_connect('icon-press'){|entry| entry.visibility = !entry.visibility?}
    @vpn_logintype.signal_connect('changed'){|combo|
      activate_pass_entry if @vpn_logintype.active != 0
      deactivate_pass_entry if @vpn_logintype.active == 0
    }

    # Configure signals/actions for vpnlist
    @vpns.each{|x| x.btn.signal_connect('clicked'){|btn| self.select_vpn(btn.label)}}
  end

#  # Create the system tray icon
#  # returns [Gtk::StatusIcon] system tray icon
#  def create_system_tray_icon
#    tray = Gtk::StatusIcon.new
#    tray.pixbuf = GdkPixbuf::Pixbuf.new(file:@icon)
#
#    # Left click menu?
#    tray.signal_connect('activate'){|widget|
#      widget.pixbuf = GdkPixbuf::Pixbuf.new(file:@targeted_icon)
#    }
#
#    return tray
#  end
#
#  # Create the popup menu for the system tray icon
#  # returns [Gtk::Menu] popup menu
#  def create_popup_menu
#    menu = Gtk::Menu.new
#
#    # Add enable entry
#    enable = Gtk::ImageMenuItem.new(label: "Enable")
#    enable.image = Gtk::Image.new(pixbuf: GdkPixbuf::Pixbuf.new(file:@enabled_icon, width:16, height:16))
#    enable.signal_connect('activate'){ start_and_manage_vpn(false) }
#    menu.append(enable)
#
#    # Add target entry
#    target = Gtk::ImageMenuItem.new(label: "Target")
#    target.image = Gtk::Image.new(pixbuf: GdkPixbuf::Pixbuf.new(file:@targeted_icon, width:16, height:16))
#    target.signal_connect('activate'){ start_and_manage_vpn(true) }
#    menu.append(target)
#
#    # Add disable entry
#    disable = Gtk::ImageMenuItem.new(label: "Disable")
#    disable.image = Gtk::Image.new(pixbuf: GdkPixbuf::Pixbuf.new(file:@disabled_icon, width:16, height:16))
#    disable.signal_connect('activate'){ @vpn_comm_in << CommMsg.new(CommCmd.halt, nil) }
#    menu.append(disable)
#    menu.append(Gtk::SeparatorMenuItem.new)
#
#    # Add settings entry
#    settings = Gtk::ImageMenuItem.new(stock: Gtk::Stock::PREFERENCES)
#    settings.label = "Settings"
#    settings.signal_connect('activate'){ @settings.show_all }
#    menu.append(settings)
#
#    # Add log entry
#    log = Gtk::ImageMenuItem.new(stock: Gtk::Stock::PREFERENCES)
#    log.label = "Logs"
#    log.signal_connect('activate'){ @logwin.show_all }
#    menu.append(log)
#    menu.append(Gtk::SeparatorMenuItem.new)
#
#    # Add quit entry
#    quit = Gtk::ImageMenuItem.new(stock: Gtk::Stock::QUIT)
#    quit.signal_connect('activate'){
#      @halt = true
#      if @vpn_comm_in
#        @vpn_comm_in << CommMsg.new(CommCmd.halt, nil)
#      else
#        Gtk.main_quit
#      end
#    }
#    menu.append(quit)
#
#    # Handle popup menu signal
#    @tray.signal_connect('popup-menu'){|widget, button, time|
#      menu.popup(nil, nil, button, time)
#    }
#
#    menu.show_all
#    return menu
#  end
#
#  # Create the log window
#  # https://github.com/ruby-gnome2/ruby-gnome2/blob/master/gtk3/sample/gtk-demo/textview.rb
#  # @returns [Gtk::Window] the log window to work with
#  def create_log_window
#    logwin = Gtk::Window.new
#    logwin.title = "OpenVPN PIA - Logs"
#    logwin.set_default_size(1000,700)
#    logwin.icon = GdkPixbuf::Pixbuf.new(file:@icon)
#    logwin.override_background_color(:normal, Gdk::RGBA.new(0, 0, 0, 0))
#
#    # Create a scrollable text view
#    @logview = Gtk::TextView.new
#    @logview.editable = false
#    @logview.override_background_color(:normal, Gdk::RGBA.new(0, 0, 0, 0))
#    scroll = Gtk::ScrolledWindow.new
#    scroll.set_policy(:automatic, :automatic)
#    scroll.add(@logview)
#    logwin.add(scroll)
#
#    # Automatically scroll window
#    @logview.signal_connect("size-allocate"){
#      scroll.vadjustment.value = scroll.vadjustment.upper - scroll.vadjustment.page_size
#    }
#
#    # Configure text view
#    @logview.buffer.create_tag("font", "font" => "Mono 11")
#    ColorMap.each{|code, color| @logview.buffer.create_tag(color, "foreground" => color) }
#    @logiter = @logview.buffer.get_iter_at(offset: 0)
#    log("OpenVPN PIA Logs\n".colorize(:cyan))
#
#    # Hide log window on escape
#    logwin.signal_connect('delete-event'){|widget, event|
#      widget.hide_on_delete
#    }
#    logwin.signal_connect('key_press_event'){|widget, event|
#      logwin.visible = false if event.keyval == Gdk::Keyval::KEY_Escape
#    }
#
#    return logwin, @logview, @logiter
#  end
#
#  def start_and_manage_vpn(target_mode)
#    return if !@vpn_comm_in.nil?
#    @vpn_comm_in = Queue.new
#
#    region_combo = As.builder.get_object("region_combo")
#    openvpn_config = @openvpn_configs[region_combo.active]
#    app = target_mode ? As.builder.get_object("target_entry").text : nil
#
#    Thread.new{
#      begin
#        vpn = VPN.new(@log, "pia", @config, openvpn_config, nameservers: ["209.222.18.222", "209.222.18.218"])
#        thread, vpn_comm_out = vpn.run(@vpn_comm_in, app: app)
#
#        msg = false
#        while true do
#          sleep(0.25) if !msg
#          msg = false
#
#          # Incoming notification
#          if !vpn_comm_out.empty?
#            msg = vpn_comm_out.pop
#            log(@log.format("CMD: #{msg.cmd}, Value: #{msg.value}\n").colorize(:magenta))
#
#            # Set icon for tunnel up status
#            if msg.cmd == CommCmd.tun_up
#              icon = target_mode ? @targeted_icon : @enabled_icon
#              @tray.pixbuf = GdkPixbuf::Pixbuf.new(file:icon)
#
#            # Set icon disabled status
#            elsif msg.cmd == CommCmd.tun_down
#              @tray.pixbuf = GdkPixbuf::Pixbuf.new(file:@disabled_icon)
#
#            # Handle halt ack
#            elsif msg.cmd == CommCmd.halt
#              Gtk.main_quit if @halt
#              break
#            end
#          end
#
#          # Print log messages
#          if !@log.empty?
#            msg = true
#            log(@log.pop)
#          end
#        end
#      rescue Exception => e
#        log(e)
#      ensure
#        @vpn_comm_in = nil
#        @tray.pixbuf = GdkPixbuf::Pixbuf.new(file:@disabled_icon)
#      end
#    }
#  end
#
#  # Add the colorized string to the given text buffer
#  # @param str [String] string with ansi color codes
#  def log(str)
#    @log.tokenize_colorize(str).each{|token|
#      @logview.buffer.insert(@logiter, token.str, tags: [ColorMap[token.color], "font"])
#    }
#  end
end

#-------------------------------------------------------------------------------
# Main entry point
#-------------------------------------------------------------------------------
if __FILE__ == $0
  VpnCtl.new
  Gtk.main
end

# vim: ft=ruby:ts=2:sw=2:sts=2
