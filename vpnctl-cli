#!/usr/bin/env ruby
#MIT License
#Copyright (c) 2018 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

root_path = File.dirname(File.expand_path(__FILE__))
root_path = '/usr/share/vpnctl' if root_path == '/usr/bin'
$LOAD_PATH.unshift(root_path)

require 'time'                  # Time date functions
require 'open3'                 # Better system commands
require 'socket'                # Networking support
require 'colorize'              # Color output
require 'nub'                   # Commands
require 'lib/model'             # vpnctl model
require 'lib/config'            # vpnctl config

class VpnCtlCli
  attr_reader(:config)

  # Initialize this VPN instance
  # @param name [String] name of the vpn to use
  def initialize(name)
    Log.die("must be executed as root!") unless User.root?
    Log.die("IPForward=kernel must be set!") unless Net.ip_forward?

    @config = Config.vpn(name)
  end

  # Start and manage the vpn connection in a separate thread
  def start
    return ThreadComm.new{|comm_in, comm_out|
      halt = false
      retry_cnt= 0

      while !halt do
        begin
          retry_str = retry_cnt > 0 ? " - retry #{retry_cnt}" : ""

          # (1) Main thread: Write out the auth file for OpenVPN to read
          File.open(@config.auth, "w", 0600){|f|
            f.puts(@config.login.user)
            f.puts(@config.login.pass)
          }

          # (2) Main thred: Create network namespace if required
          namespace_exec = ""
          if @config.target
            Log.warn("Starting targeted VPN connection#{retry_str}")
            Net.create_namespace(@config.namespace)
            namespace_exec = "ip netns exec #{@config.namespace} "
            msg = "Namespace #{@config.namespace} can't reach google.com"
            raise(Exception, msg) if !Net.namespace_connectivity?(@config.namespace, 'google.com')
          else
            Log.warn("Starting machine wide VPN connection#{retry_str}")
          end

          # (3) OpenVPN thread: manages the openvpn process (inside/outside namespace)
          Log.info("Using OpenVPN config #{@config.ovpn.colorize(:cyan)}")
          resolved_script = "/etc/openvpn/scripts/update-systemd-resolved"
          env_path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          cmd = "openvpn --config #{@config.ovpn} --setenv '#{env_path}' --script-security 2 "
          cmd += "--up #{resolved_script} --down #{resolved_script} --down-pre "
          cmd += "--auth-user-pass #{@config.auth}"
          stdin, stdout, openvpn_thread = Open3.popen2e("#{namespace_exec}bash -c '#{Net.proxy_export}#{cmd}'")

          # (4) Log thread: Start a separate log thread drain stdout to logs
          log_thread = Thread.new{
            while line=stdout.gets do
              if line.include?("Initialization Sequence Completed")
                comm_in << ThreadMsg.new(Model::CommCmd.vpn_up)
              end
              if msg = Model::FailMessages.find{|x| line.include?(x)}
                comm_in << ThreadMsg.new(Model::CommCmd.fail, msg)
              end

              # Trim out OVPN timestamps e.g. Fri Jul 20 07:14:55 2018
              line = line[line.index(Time.now.year.to_s)+5..-1] if line.include?(Time.now.year.to_s)
              Log.info("#{'OVPN:'.colorize(:yellow)} #{line.strip}")
            end
          }

          # (5) Main thread: Manage thread communication and actions
          vpn_started = false
          while true do
            if !comm_in.empty?
              msg = comm_in.pop

              # Wait for tunnel to be created
              if msg.cmd == Model::CommCmd.vpn_up && !vpn_started
                vpn_started = true
                Log.info("VPN #{@config.name.colorize(:cyan)} is up and running")
                comm_out << ThreadMsg.new(Model::CommCmd.vpn_up)

                # Add any routes from the configuration
                tun_ip = Socket.getifaddrs.find{|x| x.addr and x.name == 'tun0' and x.addr.ipv4?}.addr.ip_address
                @config.routes.each{|route|
                  Log.print("Adding route #{route.colorize(:cyan)} for #{tun_ip.colorize(:cyan)} on tun0")
                  exec_with_status("ip route add #{route} via #{tun_ip} dev tun0")
                }

                # Launch apps in the namespace
                (@config.apps || []).each{|app| self.launch_app_in_namespace(app)}
              end

              # Terminate on halt, potentially retry on errors
              if msg.cmd == Model::CommCmd.halt
                Log.warn("Halting the management thread")
                raise SystemExit
              elsif msg.cmd == Model::CommCmd.fail
                Log.error(msg.value)
                raise(Exception, "OpenVPN connection failed")
              end
            else
              sleep(0.1)
            end

            # Bail if vpn is down and log is drained
            if !openvpn_thread.alive?
              sleep(0.1)
              raise(Exception, "OpenVPN connection failed") if comm_in.empty?
            elsif !vpn_started
              Log.info("Waiting for vpn #{@config.name.colorize(:cyan)} to be started...")
            end
          end

        # Allow for aborting
        rescue SystemExit, Interrupt
          halt = true

        # Log exceptions
        rescue Exception => e
          Log.error(e.to_s)
          comm_out << ThreadMsg.new(Model::CommCmd.tun_down)
          halt = true if !@config.retry

        # Clean up on errors and try again
        ensure
          File.delete(@config.auth) if File.exist?(@config.auth)
          stdin.close if !stdin.nil?
          stdout.close if !stdout.nil?
          self.stop(openvpn_thread)

          # Wait for log to drain then send out halt notification
          sleep(0.25)
          while !Log.empty? do
            sleep(0.25)
          end
          comm_out << ThreadMsg.new(Model::CommCmd.halt) if halt
        end

        # Retry sleep logic
        if halt
          Log.warn("System exit or user terminated!")
        else
          retry_cnt += 1
          Log.warn("OpenVPN terminated/disconnected waiting 10")
          sleep(10)
        end
      end
    }
  end

  # Stop the VPN connection, terminating any target apps and
  # cleaning up the network namespace.
  # @param openvpn_thread [Thread] to terminate
  def stop(openvpn_thread)
    Log.warn("Shutting down the VPN and cleaning up")

    # Kill all target apps and openvpn
    if @config.target
      Log.info("Terminating all apps running in the #{@config.namespace.colorize(:cyan)} namespace")
      system("ip netns pids #{@config.namespace} | xargs -rd'\n' kill -9 &> /dev/null")
    elsif openvpn_thread and openvpn_thread.alive?
      Process.kill("KILL", openvpn_thread.pid)
      openvpn_thread.kill
    end

    # Clean up network namespace
    Net.delete_namespace(@config.namespace) if @config.target
  end

  # Launch the given app in the given namespace
  # @param app [String] the name of the app to launch
  # @returns [String] pid of the app that was just launched
  def launch_app_in_namespace(app)
    Log.info("Launching app #{app.colorize(:cyan)} in the #{@config.namespace.colorize(:cyan)} namespace")
    pid = spawn("ip netns exec #{@config.namespace} sudo -H -u #{User.name} bash -c '#{Net.proxy_export}#{app}' &> /dev/null")
    Process.detach(pid)

    # Check if the app is running
    begin
      Process.getpgid(pid)
      Log.puts("...success!".colorize(:green), stamp:false)
    rescue Errno::ESRCH
      Log.puts("...failed!".colorize(:red), stamp:false)
      raise SystemExit
    end

    return pid
  end

  # Execute the shell command and print status
  # @param cmd [String] command to execute
  # @param die [bool] exit on true
  # @param check [String] result to check against
  # @result status [bool] true on success else false
  def exec_with_status(cmd, die:true, check:nil)
    out = `#{cmd}`
    status = true
    status = check == out if !check.nil?
    status = $?.exitstatus == 0 if check.nil?

    #if status
    if $?.exitstatus == 0
      Log.puts("...success!".colorize(:green), stamp:false)
    else
      Log.puts("...failed!".colorize(:red), stamp:false)
      Log.puts(out.colorize(:red)) and exit if die
    end

    return status
  end
end

#-------------------------------------------------------------------------------
# Main entry point
#-------------------------------------------------------------------------------
def vpnCtlCliMain
  app = 'vpnctl-cli'
  version = FileUtils.version('vpnctl.gemspec', /\s*spec\.version\s*=.*(\d+\.\d+\.\d+).*/)
  examples = "Add VPN: sudo ./#{app} add PIA save\n".colorize(:green)
  examples += "List VPNs: sudo ./#{app} list\n".colorize(:green)
  examples += "Start VPN: sudo ./#{app} start NordVPN\n".colorize(:green)
  cmdr = Commander.new(app:app, version:version, examples:examples)

  # Add VPNs
  #-----------------------------------------------------------------------------
  cmdr.add('add', 'Add VPN yaml stub to config', nodes:[
    Option.new(nil, 'VPN name to use for entry', required: true),
    Option.new(nil, 'VPN type to use for entry', required: true, allowed:{
      'ask': 'Always ask for a password',
      'save': 'Password is saved on the config file'
    })
  ], examples: "Add VPN: sudo ./#{app} add PIA save\n")

  # List VPNs
  #-----------------------------------------------------------------------------
  cmdr.add('list', 'List configured VPNs',
    examples: "List VPNs: sudo ./#{app} list\n")

  # Start VPNs
  #-----------------------------------------------------------------------------
  cmdr.add('start', 'Start VPN service', nodes:[
    Option.new(nil, 'VPN name to lookup in config', required: true)
  ], examples: "Start VPN: sudo ./#{app} start NordVPN\n")

  cmdr.parse!
  Config.init('vpnctl.yml')

  if cmdr[:add]
    vpn = Config.add_vpn(cmdr[:add][:add0])
    vpn.login.type = cmdr[:add][:add1]
    Config.update_vpn(vpn)
    User.drop_privileges{ Config.save }
    Config.vpns.each{|x| puts("Name: #{x.name.colorize(:cyan)}, Login type: #{x.login.type}, Config: #{x.ovpn}")}
  elsif cmdr[:list]
    Config.vpns.each{|x| puts("Name: #{x.name.colorize(:cyan)}, Login type: #{x.login.type}, Config: #{x.ovpn}")}
  elsif cmdr[:start]
    begin
      vpn = VpnCtlCli.new(cmdr[:start][:start0])
      if vpn.config.login.type == Model::PassTypes.ask
        vpn.config.login.pass = Sys.getpass
      end
      vpn_thread = vpn.start
      Log.info("MGMT: Waiting for VPN to halt".colorize(:magenta))
      vpn_thread.join
    rescue Interrupt
      vpn_thread ||= []
      Log.puts(stamp:false)
      Log.info("MGMT: Halting VPN".colorize(:magenta))
      vpn_thread.push(Model::CommCmd.halt)
      vpn_thread.pop
      Log.info("MGMT: VPN Halted".colorize(:magenta))
    end
  end
end
if __FILE__ == $0; vpnCtlCliMain; end

# vim: ft=ruby:ts=2:sw=2:sts=2
