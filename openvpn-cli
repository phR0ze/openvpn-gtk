#!/usr/bin/env ruby
#MIT License
#Copyright (c) 2018 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

require 'ostruct'               # OpenStruct
require 'open3'                 # Better system commands
require 'socket'                # Networking support

require 'colorize'              # Color output
require 'nub'                   # Commands

CommCmd = OpenStruct.new({
  halt: 'halt',
  vpn_up: 'vpn_up',
  vpn_down: 'vpn_down',
})

class VPN
  Pass = Struct.new(:pass, :mode)

  # Initialize this VPN instance
  # @param vpn [String] name of the vpn to use
  # @param pass [String] password to use with the VPN
  def initialize(vpn, pass)
    Log.die("must be executed as root!") unless User.root?
    Log.die("IPForward=kernel must be set!") unless Net.ip_forward?

    # Configs
    @vpn = vpn
    @pass = pass
    @user = nil
    @routes = []
    @ovpn_conf = nil

    # Load/validate configs
    vpns = Config['vpns']
    raise("couldn't find 'vpns' in config") if vpns.nil?
    _vpn = vpns.find{|x| x['name'] == @vpn }
    raise("couldn't find '#{@vpn}' in config") if _vpn.nil?
    @user = _vpn['user']
    raise("couldn't find 'user' in config") if @user.nil?
    @routes = _vpn['routes']
    raise("couldn't find 'routes' in config") if @routes.nil?
    @ovpn_conf = _vpn['conf']
    raise("couldn't find 'conf' in config") if @ovpn_conf.nil?
    @ovpn_auth = File.join(File.dirname(@ovpn_conf), "#{@vpn}.auth")
  end

  # Start and manage the vpn connection in a separate thread
  def start
    return ThreadComm.new{|comm_in, comm_out|
      halt = false
      retry_cnt= 0

      while !halt do
        begin
          # Write out the auth file for OpenVPN to read
          File.open(@ovpn_auth, "w", 0600){|f| f.puts(@user); f.puts(@pass)}

          retry_str = " - retry #{retry_cnt}" if retry_cnt > 0
          Log.warn("Starting the VPN connection#{retry_str}")
          Log.info("Using OpenVPN config #{@ovpn_conf.colorize(:cyan)}")

          # (2) OpenVPN thread: manages the openvpn process
          resolved_script = "/etc/openvpn/scripts/update-systemd-resolved"
          env_path = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          cmd = "openvpn --config #{@ovpn_conf} --setenv '#{env_path}' --script-security 2 "
          cmd += "--up #{resolved_script} --down #{resolved_script} --down-pre "
          cmd += "--auth-user-pass #{@ovpn_auth}"
          stdin, stdout, openvpn_thread = Open3.popen2e("bash -c '#{Net.proxy_export}#{cmd}'")

          # (3) Log thread: Start a separate log thread drain stdout to logs
          log_thread = Thread.new{
            while line=stdout.gets do
              if line.include?("Initialization Sequence Completed")
                comm_in << ThreadMsg.new(CommCmd.vpn_up)
              end
              Log.info("#{'OVPN:'.colorize(:yellow)} #{line.strip}")
            end
          }

          # Manage thread communication and actions
          vpn_started = false
          while true do
            Log.info("Waiting for vpn #{@vpn.colorize(:cyan)} to be started...") if !vpn_started
            if !comm_in.empty?
              msg = comm_in.pop
              
              # Wait for tunnel to be created
              if msg.cmd == CommCmd.vpn_up && !vpn_started
                vpn_started = true
                Log.info("VPN #{@vpn.colorize(:cyan)} is up and running")
                comm_out << ThreadMsg.new(CommCmd.vpn_up)

                # Add any routes from the configuration
                tun_ip = Socket.getifaddrs.find{|x| x.addr and x.name == 'tun0' and x.addr.ipv4?}.addr.ip_address
                @routes.each{|route|
                  Log.print("Adding route #{route.colorize(:cyan)} for #{tun_ip.colorize(:cyan)} on tun0")
                  exec_with_status("ip route add #{route} via #{tun_ip} dev tun0")
                }
              end

              # Terminate
              if msg.cmd == CommCmd.halt
                Log.warn("Halting the management thread")
                raise SystemExit
              end
            else
              sleep(0.25)
            end

            # Monitor vpn
            raise(Exception, "OpenVPN connection failed") if !openvpn_thread.alive?
          end

        # Allow for aborting
        rescue SystemExit, Interrupt
          halt = true

        # Log exceptions
        rescue Exception => e
          Log.error(e.to_s)
          comm_out << ThreadMsg.new(CommCmd.tun_down)

        # Clean up on errors and try again
        ensure
          File.delete(@ovpn_auth) if File.exist?(@ovpn_auth)
          stdin.close if !stdin.nil?
          stdout.close if !stdout.nil?
          if openvpn_thread and openvpn_thread.alive?
            Process.kill("KILL", openvpn_thread.pid)
            openvpn_thread.kill
          end

          # Wait for log to drain then send out halt notification
          sleep(0.25)
          while !Log.empty? do
            sleep(0.25)
          end
          comm_out << ThreadMsg.new(CommCmd.halt) if halt
        end

        # Retry sleep logic
        if halt
          Log.warn("System exit or user terminated!")
        else
          retry_cnt += 1
          Log.warn("OpenVPN terminated/disconnected waiting 10")
          sleep(10)
        end
      end
    }
  end

  # Execute the shell command and print status
  # @param cmd [String] command to execute
  # @param die [bool] exit on true
  # @result status [bool] true on success else false
  def exec_with_status(cmd, die:true, check:nil)
    out = `#{cmd}`
    status = true
    status = check == out if !check.nil?
    status = $?.exitstatus == 0 if check.nil?

    #if status
    if $?.exitstatus == 0
      Log.puts("...success!".colorize(:green), stamp:false)
    else
      Log.puts("...failed!".colorize(:red), stamp:false)
      Log.puts(out.colorize(:red)) and exit if die
    end

    return status
  end
end

#-------------------------------------------------------------------------------
# Main entry point
#-------------------------------------------------------------------------------
if __FILE__ == $0
  app = 'openvpn-cli'
  version = '0.0.1'
  examples = "Start VPN: sudo ./#{app} start ospra\n".colorize(:green)
  cmdr = Commander.new(app, version, examples:examples)
  cmdr.add('start', 'Start VPN service', options:[
    Option.new(nil, 'VPN name to lookup in config')
  ])
  cmdr.parse!

  # Create the vpn instance to work with
  require 'io/console'
  print("Enter Password: ")
  pass = STDIN.noecho(&:gets).chomp
  puts

  # Init utils
  Config.init('openvpn.yml')

  # Start the VPN
  if cmdr[:start]
    begin
      vpn = VPN.new(cmdr[:start][:start0], pass).start
      Log.info("MGMT: Waiting for VPN to halt".colorize(:magenta))
      vpn.join
    rescue Interrupt
      Log.puts(stamp:false)
      Log.info("MGMT: Halting VPN".colorize(:magenta))
      vpn.push(CommCmd.halt)
      vpn.pop
      Log.info("MGMT: VPN Halted".colorize(:magenta))
    end
  end
end

# vim: ft=ruby:ts=2:sw=2:sts=2
